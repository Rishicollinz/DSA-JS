3.5:Automated testing-7/2/24
=====================
Automated testing means that tests are written separately, in addition to the code. They run our functions in various ways and compare results with the expected.

=>Behavior Driven Development:
===================

Three things: test,documentation and examples.

1.Creation of spec:
like this function is for what, what it does and expected output;

E.g:
describe("pow", function() {

  it("raises to n-th power", function() {
    assert.equal(pow(2, 3), 8);
  });

});

Explanation:
describe("title", function() { ... })
it("use case description", function() { ... })
assert.equal(value1, value2)


2.Mocha:
========
 the core framework: it provides common testing functions including describe and it and the main function that runs tests.

 before()=>to display before test;
 after()=>after test display;

 beforeEach()=>display before every it.
 afterEach()=>display after every it.

3.Chai:=for assertions.
========


4.1:Object:=7/2/24
===========

=> key can't be keywords.This is known as property names limitations.

property existence test,in:
==========================

=>we can whether a object has a specific prop(key);

syntax:"key" in object

for...in loop:
=============
for (key in object) {
  // executes the body for each key among object properties
}

Order in objects:
=================

->if property(keys) in obj are ints, then they are sorted otherwise like string they are in creation order;


4.2:Object references and copying:
=================================

let a={an obj};
let b=a;

=>Here,b is not a new one, it links the a's reference.
=>Any change here will change the original.

here a==b because of same reference or memory.

let a={},b={};
here a!==b(bcoz both are different objects);

=>Const objects can be modified.

copying:creates an extra reference to the same obj;

cloning:
========
->Naive method(for...each)

=>Object.assign(dest,source1,source2);

eg:
let user = {
    name: "John",
    age: 30
};

let clone = {}; // the new empty object

Object.assign(clone,user);
clone.name="rishi";
console.log(user);
console.log(clone);

output:

{ name: 'John', age: 30 }
{ name: 'rishi', age: 30 }

*.Structured clone:
To fix that and make user and clone truly separate objects, we should use a cloning loop that examines each value of user[key] and, if it’s an object, then replicate its structure as well. That is called a “deep cloning” or “structured cloning”. There’s structuredClone method that implements deep cloning.

let user = {
  name: "John",
  sizes: {
    height: 182,
    width: 50
  }
};

let clone = structuredClone(user);

alert( user.sizes === clone.sizes ); // false, different objects

// user and clone are totally unrelated now
user.sizes.width = 60;    // change a property from one place
alert(clone.sizes.width); // 50, not related

4.3:Garbage Collection:
=======================
=>If a variable isn't reachable, then this will junk the data and frees the memory;

*.Unreachable island

*.The basic garbage collection algorithm is called "mark and sweep";

*.Mark and sweep:
like parent node -> Child node -> leaf node(in a loop);

*.when there is no leaf to mark, it checks for reachability and removes the unreachable codes.

optimizations:
->Generational Collection:new and old elements.

->Incremental Collection:
big code->spilt to small module code->many garbage collection. to reduce delay

->Idle time collection: garbage collection runs only when the cpu is idle.

4.4:Object methods,"this"
===========================

=>this keyword:
===============

let user = {
  name: "John",
  age: 30,

  sayHi() {
    // "this" is the "current object"
    alert(this.name);
  }

};

user.sayHi(); // John
=>this is used to access values from the same class like block.

=>this is not bound:
e.g:
function sayHi() {
  alert( this.name );
}

it can run based on the context of the calling obj;

=>Arrow functions don't have this.


4.5:Constructor, operator"new":
=================
Eg:
function User(name) {
  this.name = name;
  this.isAdmin = false;
}

let user = new User("Jack");

alert(user.name); // Jack
alert(user.isAdmin); // false

Def:
The regular {...} syntax allows us to create one object. But often we need to create many similar objects, like multiple users or menu items and so on.

That can be done using constructor functions and the "new" operator.


constructor function:
=====================

Optional chaining:
==================
The optional chaining ?. stops the evaluation if the value before ?. is undefined or null and returns undefined.
let user = {}; // user has no address

alert( user?.address?.street );

Symbol type:
=============
->A object can have symbol or string as keys.
->It is a unique identifier;

let id=Symbol();

->It is always unique;

usage ex:
let user = { // belongs to another code
  name: "John"
};

let id = Symbol("id");

user[id] = 1;

alert( user[id] ); // we can


->Instead of using the id as string and defining. it will be added to user obj and can be accessed everywhere but symbol can't be accessed by others.

=>Symbols are skipped by for...in loop.

=>Symbol.for("id")=>if there is already a symbol, it is used but if there is not, it is created.

Object to primitive conversion:
====================
hints:
    ->number
    ->String
    ->default

*.[Symbol.toPrimitive]

*.toString/valueOf




1.Datatypes:=6/2/24
============

1.1: Primitive Datatypes:
=========================
1.All the primitive datatypes are primitive in js.
2.Primitive is lightweight and fast but each primitive(string...) may have inbuilt functions.
3.All functions are objects and objects are heavyweight.
4.To solve this, In JS, a object wrapper is wrapped around datatypes.
5.This wrapper has inbuilt functions upon executing its functions, it is destroyed.

1.2: Number:
============

1.2.1.use 'e':
==========

->For positive:
        ->let a=100000; can be represented as 1e5(5 zeros 1*10000);
->For negative:
        ->let a=0.00005; can be represented as 1e-5(5 zeros before 1/10000 );

1.2.2.Hex num:= 0xff//255 as num
1.2.3.Binary num:=0b11111111//255 as num
1.2.4.Octal num:=0o377//255 as num

1.2.5:toString(base):
=====================
->It is used to convert num to its specific base.
->By default, num is base=10

->let a=255;
    a.toString(8//16//2//10//32)(//octal//hexdec//binary//decimal//for url)

    for directly using num:
    255..toString(use double decimal bcoz single decimal means float value);

1.2.6:Rounding:
===============
    ->Math.round=3.7 as 4
    ->Math.ceil=3.1 as 4 and -3.1 as -3
    ->Math.floor=3.6 as 3 and -3.6 as -4
    ->Math.trunc=3.625 as 3

    ->toFixed(n):The method toFixed(n) rounds the number to n digits after the point and returns a string representation of the result.

            let num = 12.34;
            alert( num.toFixed(1) ); // "12.3" it is string

1.2.7:->isFinite() and isNaN();
=========================
->Number.isFinite() and Number.isNaN()// they are strict version which checks the datatypes too.
1.2.8
->Object.is(a, b) is the same as a === b.

1.2.9:ParseInt and parseFloat:
=================================

*.These read the value until they can't

let a=10.25pt;

parseFloat(25.25$)//op:25.25(when $ encountered it can't read so stops); similar for parseInt;

parseFloat(num,radix); 
->radix is base 2,8,10,16//converts the num to its base like decimal,binary representation.

1.2.10:Other Math functions:
===========================

->Math.random();
->Math.min,max,pow;

1.3:Strings:
===========
1.3.1.usage of backslash(escape character):
=============================================
\\ for single \;
\' or \" for ' or "

.length= is a property which displays the length of the string

        
1.3.2.Accessing characters:
==========================

->str.at(pos);//it also -ve values.
    e.g:str.at(-1)//last character; str.at(-2) means last before character;
->str[pos];

*.Strings are immutable

*.toUpperCase();toLowerCase()
=============================

*.indexOf():
    let str = 'Widget with id';

    alert( str.indexOf('id', 2) ) // 12
    indexOf(str,pos);
*.lastIndexOf(str,pos):
    ->Searches from the end.

*.includes(str,pos)=>pos is the pos to start the search;

*.startsWith(str) and endsWith(str);

substring:
==========

*.slice(start, end)->from start to end (not including end)->allows negatives

*.substring(start, end)->between start and end (not including end)->negative values mean 0->start can be greater than end

*.substr(start, length)->from start get length characters->allows negative start

Comparing strings:
===================

*.codePointAt(0)=>displays the decimal number for any character

*.fromCodePoint(90)=>z 

*.localeCompare():
    The call str.localeCompare(str2) returns an integer indicating whether str is less, equal or greater than str2 according to the language rules:

    Returns a negative number if str is less than str2.
    Returns a positive number if str is greater than str2.
    Returns 0 if they are equivalent.

5.4:Array:
==========

->arr.at(-1):displays the last element;

=>arr.shift()=>Removes the first element of Array
=>arr.push()=>adds the element at the end
this can be used for queue...

=>arr.pop()=>Removes the element from the end

=>arr.unshift()=>Adds element to the front of Array

=>Push and unshift can add multiple elements at once;

=>Array is an object so that's why arr[0] works.

=>push and pop is fast, shift and unshift are slow.

=>for..of loop in array,

=>we can truncate the array by reducing the arr.length;

=>Don't compare array with == or ===. compare by item by items.

5.5 Array methods:
==================

=>arr.push()
=>arr.pop()
=>arr.shift()
=>arr.unshift()

delete an element in array:

=>arr.splice:is used for deletion,insertion in array;

=>arr.splice(startpos,deleteCount,insertVals);

E.g:
Deletion:
let arr = ["I", "study", "JavaScript", "right", "now"];

// remove 3 first elements and replace them with another
arr.splice(0, 3, "Let's", "dance");

alert( arr ) // now ["Let's", "dance", "right", "now"]
Insertion:
1.let arr = ["I", "study", "JavaScript"];

// from index 2
// delete 0
// then insert "complex" and "language"
arr.splice(2, 0, "complex", "language");

alert( arr ); // "I", "study", "complex", "language", "JavaScript"

=>arr.slice
=>arr.concat(arguments..arr..value);

=>foreach in array:
arr.forEach(function(item, index, array) {
  // ... do something with item
});

Searching in array:
==================

=>arr.indexOf,lastIndexOf,includes.

=>arr.find(fn):
let result = arr.find(function(item, index, array) {
  // if true is returned, item is returned and iteration is stopped
  // for falsy scenario returns undefined
});

Eg:let users = [
  {id: 1, name: "John"},
  {id: 2, name: "Pete"},
  {id: 3, name: "Mary"}
];

let user = users.find(item => item.id == 1);

alert(user.name); // John


=>arr.findIndex(fn);//returns index or -1

=>arr.findLastIndex(fn);//returns last index

=>arr.filter(fn);
e.g:
let users = [
  {id: 1, name: "John"},
  {id: 2, name: "Pete"},
  {id: 3, name: "Mary"}
];

// returns array of the first two users
let someUsers = users.filter(item => item.id < 3);

alert(someUsers.length); // 2

arr.map:
========
It calls the function for each element of the array and return the array of results.

E.g:
let lengths = ["Bilbo", "Gandalf", "Nazgul"].map(item => item.length);
alert(lengths); // 5,7,6

map(callbackfn: (value: number, index: number, array: number[]) => any, thisArg?: any): any[]
A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.


Calls a defined callback function on each element of an array, and returns an array that contains the results.

=>map(callbackfn: (value: number, index: number, array: number[]) => any, thisArg?: any): any[]
A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
=>Calls a defined callback function on each element of an array, and returns an array that contains the results.

arr.sort():
============

=>default sort is alphabet sort(lexicographic);

function compareNumeric(a, b) {
  if (a > b) return 1;
  if (a == b) return 0;
  if (a < b) return -1;
}

let arr = [ 1, 2, 15 ];

arr.sort(compareNumeric);

alert(arr); 

=>arr.reverse():reverses the array;

*.arr.split(delim):it is used to split a string or something based on the delimitor.

*.arr.join(adder):It is opposite to split;

=>arr.reduce(accumulator,item,index,array):
same as map where each val calls a fn but the results ar added to accumulator for each time.

Eg:
let arr=[1,2,3,4,5];
let r=arr.reduce((sum,curr)=>{
    return sum+=curr;
},0)
console.log(r);

op:15

=>arr.reduceRight(): same as reduce but goes from right to left.

.isArray():checks whether it is array or not;

=>arr.some()//checks for first truthy(||);

=>arr.every()//checks for first falsey(&&);

=>arr.fill(value, start, end);

=>The copyWithin() method of Array instances shallow copies part of this array to another location in the same array and returns this array without modifying its length.

5.6:Iterables=7/2/24
=====================

Objects that can be used in for..of are called iterable.

Technically, iterables must implement the method named Symbol.iterator.
The result of obj[Symbol.iterator]() is called an iterator. It handles further iteration process.
An iterator must have the method named next() that returns an object {done: Boolean, value: any}, here done:true denotes the end of the iteration process, otherwise the value is the next value.
The Symbol.iterator method is called automatically by for..of, but we also can do it directly.
Built-in iterables like strings or arrays, also implement Symbol.iterator.
String iterator knows about surrogate pairs.
Objects that have indexed properties and length are called array-like. Such objects may also have other properties and methods, but lack the built-in methods of arrays.

If we look inside the specification – we’ll see that most built-in methods assume that they work with iterables or array-likes instead of “real” arrays, because that’s more abstract.

Array.from(obj[, mapFn, thisArg]) makes a real Array from an iterable or array-like obj, and we can then use array methods on it. The optional arguments mapFn and thisArg allow us to apply a function to each item.

5.7:Map:
========

=>Map is like object but allows keys of any type.

new Map() – creates the map.
map.set(key, value) – stores the value by the key.
map.get(key) – returns the value by the key, undefined if key doesn’t exist in map.
map.has(key) – returns true if the key exists, false otherwise.
map.delete(key) – removes the element (the key/value pair) by the key.
map.clear() – removes everything from the map.
map.size – returns the current element count.

=>Map can also use objects as keys.
=>Map uses === for comparison and it is not changeable.

Iteration:
map.keys(),map.values(),map.entries()(this is default for for loop);

let recipeMap = new Map([
  ['cucumber', 500],
  ['tomatoes', 350],
  ['onion',    50]
]);

// iterate over keys (vegetables)
for (let vegetable of recipeMap.keys()) {
  alert(vegetable); // cucumber, tomatoes, onion
}

mapname.forEach(value,key,map);

*.we can create map from array:
E.g:
let map = new Map([
  ['1',  'str1'],
  [1,    'num1'],
  [true, 'bool1']
]);

alert( map.get('1') ); 

*.we can create map from object:
E.g:
let obj = {
  name: "John",
  age: 30
};

let map = new Map(Object.entries(obj));

alert( map.get('name') ); // John

5.7:SET:
========
A Set is a special type collection – “set of values” (without keys), where each value may occur only once.

Methods:
new Set([iterable]) – creates the set, and if an iterable object is provided (usually an array), copies values from it into the set.
set.add(value) – adds a value, returns the set itself.
set.delete(value) – removes the value, returns true if value existed at the moment of the call, otherwise false.
set.has(value) – returns true if the value exists in the set, otherwise false.
set.clear() – removes everything from the set.
set.size – is the elements count.

Iteration:
=========
.keys(),.values(),.entries();

5.8:WeakMap and WeakSet:
========================

->Garbage collection will free the code from memory if it isn't reachable.

->If an object in an array, then even if the object doesn't have reachability, it will be present and not removed due to array.

=>In weakMap, the keys should be object.
=>Compare it with the regular Map example above. Now if john only exists as the key of WeakMap – it will be automatically deleted from the map (and memory).
=>It doesn't support iteration.
methods:
========

.set,.get,.delete,.has
no iteration methods

=>weakset is like weakmap and accepts only the objects.

5.9:Object.keys,values,entries:
===============================

Methods:
For plain objects, the following methods are available:

Object.keys(obj) – returns an array of keys.
Object.values(obj) – returns an array of values.
Object.entries(obj) – returns an array of [key, value] pairs.

=>Normal maps.keys() return iterable but not real array, but the above methods returns the real array;

=>Normal objects lack many inbuilt functions like map,filter and so on.

Object transform:
=================
=>To solve this,
  ->Convert the object to array using Object.entries();
  ->Then use the required inbuilt functions.
  ->Then again convert the array to objects using Object.fromEntries();
  ->This is transforming the objects.

5.10:Destructuring assignment:
==============================

let a=[a,b];
let [first,second]=a;
here first=a,second=b;
this is destructuring.

leaving a element:
let a=[a,b,c];
let [first,,third]=a;
it leaves second element

let [first,...all]=a;
all=is a array without the first element;

->It also supports default value like function default parameter.

5.11:Date and time:
==================

creation:
new Date();

Getting:
->getFullYear();
->getMonth();
->getDate();
->getHours(),getMinutes(),getSeconds(),getMilliseconds();
->getDay();
->getTime();
->getTimezoneOffset();

setting:
The following methods allow to set date/time components:

setFullYear(year, [month], [date])
setMonth(month, [date])
setDate(date)
setHours(hour, [min], [sec], [ms])
setMinutes(min, [sec], [ms])
setSeconds(sec, [ms])
setMilliseconds(ms)
setTime(milliseconds) (sets the whole date by milliseconds since 01.01.1970 UTC)

5.12:JSON methods, to JSON:
==========================


JavaScript provides methods:

->JSON.stringify to convert objects into JSON.
->JSON.parse to convert JSON back into an object.

Stringify:
converts everything to string, num,boolean be same
->It doesn't support symbol,undefined or functions
->It supports nested objects

syntax:let json = JSON.stringify(value[, replacer, space])

Json.Parse:
==========

syntax:let value = JSON.parse(str[, reviver]);

this is the use of reviver:
let str = '{"title":"Conference","date":"2017-11-30T12:00:00.000Z"}';

let meetup = JSON.parse(str, function(key, value) {
  if (key == 'date') return new Date(value);
  return value;
});

alert( meetup.date.getDate() ); // now works!

6.1:Recursion and stack:=11/2/24
================================

Recursion:
When a function solves a task, in the process it can call many other functions. A partial case of this is when a function calls itself. That’s called recursion.

The execution context and stack:
================================

Execution context: It stores the info about the process of execution of a running function.

6.2:Rest parameters and spread syntax:
======================================

Rest parameter:
===============
->If there is two parameters in a function but if we give many arguments, remaining arguments can be collected like this ...args.

e.g:
function sumAll(...args) { // args is the name for the array
  let sum = 0;

  for (let arg of args) sum += arg;

  return sum;
}

alert( sumAll(1) ); // 1
alert( sumAll(1, 2) ); // 3
alert( sumAll(1, 2, 3) ); // 6

Arguments:
==========
->There is also a special array-like object named arguments that contains all arguments by their index.

E.g:
function showName() {
  alert( arguments.length );
  alert( arguments[0] );
  alert( arguments[1] );

  // it's iterable
  // for(let arg of arguments) alert(arg);
}

// shows: 2, Julius, Caesar
showName("Julius", "Caesar");

// shows: 1, Ilya, undefined (no second argument)
showName("Ilya");

->Spreading:[...a]

spreading an array into built in functions:
alert( Math.max(...arr) );

->Copying using ...a(spread operator);

6.3:Variable scope,closure:
==========================
->If a variable is declared inside a code block, it is only visible inside that block;

->Nested func can access the outer variable

Lexical environment:
===================

two parts:
  ->Environment record-stores all local variables as its properties.
  ->A reference to outer lexical env, the one associated with the outer code.

let a="hello"

in lex env,
a(key/property):"Hello"--(outer)-->Null;

steps:
->Normally, the when a js is started, the variables are in env record but it is in uninitalized state but when the line with let comes it goes to undefined or value;

->But in function, the start itself, the function is populated in env but func exp are not done this way.

=>A function has two lexical env, the inner and outer lexical env.

=>When the code wants to access a variable – the inner Lexical Environment is searched first, then the outer one, then the more outer one and so on until the global one.

=>when a function block access the outer variable using the environment variable from where it is created is known as closure. In js, all variables are closures.

6.4:The old var:
================

=>var doesn't have block scope but have function scope.

=>we can redeclare in var

=>var variables can be declared below their use.

=>hoisted means raised to the top of the function..

IIFE:
=====

In the past, as there was only var, and it has no block-level visibility, programmers invented a way to emulate it. What they did was called “immediately-invoked function expressions” (abbreviated as IIFE).

That’s not something we should use nowadays, but you can find them in old scripts.

6.5: Global Object:
===================

The global object provides variables and functions that are available anywhere. By default, those that are built into the language or the environment.

In a browser it is named window, for Node.js it is global, for other environments it may have another name.

Recently, globalThis was added to the language, as a standardized name for a global object, that should be supported across all environments. It’s supported in all major browsers.

We’ll use window here, assuming that our environment is a browser. If your script may run in other environments, it’s better to use globalThis instead.

6.6: Function object,NFE:
==========================

=>A function is a value in JS,all value have a datatype.
=>Function are of object datatype.

function name:
let user = {

  sayHi() {
    // ...
  },

  sayBye: function() {
    // ...
  }

}

alert(user.sayHi.name); // sayHi
alert(user.sayBye.name); // sayBye

.length=>It returns the number of parameters in a function;

NFE:Named function expression;

->we can give name to function expression and call it recursively like a fn declaration;
->we can only call inside the expression but not on the outside;

let sayHi = function func(who) {
  if (who) {
    alert(`Hello, ${who}`);
  } else {
    func("Guest"); // use func to re-call itself
  }
};

sayHi(); // Hello, Guest

// But this won't work:
func(); // Error, func is not defined (not visible outside of the function)

6.7:The new function syntax:
===========================

syntax:
let func = new Function ([arg1, arg2, ...argN], functionBody);

e.g:

let sum = new Function('a', 'b', 'return a + b');

alert( sum(1, 2) ); // 3

usecase:
->we can get code from server and run it dynamically.
let sum=...get from server..
let fn=new function(sum);
fn();

->used in complex web applications.


closure in new function:

=>when a function is created it has [[env]] from where it is create in lexical env. but new function don't have that. so it can't access the outer variable.

=>This is helpful because when js is pushed to production, the local variable are renamed using minifiers like a,b...so, the new function gets fn from the server,we don't know it during the creation of code. so this doesn't have conflict with the outer scope variable when minified.

6.8:Scheduling:setTimeout and setInterval:
==========================================

=>We may decide to execute a function not right now, but at a certain time later. That’s called “scheduling a call”.

setTimeout:
runs after the interval of time;

setInterval:
runs a function repeateadly after that interval of time;

setTimeout:
===========
syntax:
let timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)

func is the function name without();
code can be string 'alert("hell")';
delay in ms;

E.g:
function sayHi(phrase, who) {
  alert( phrase + ', ' + who );
}

setTimeout(sayHi, 1000, "Hello", "John"); // Hello, John

=>clearTimeout(variable)-will cancel the setTimeout

setInterval:
============
->same syntax as setTimeout
->clearInterval(id)-will cancel the setInterval

->nested setTimeout is better than setInterval:
let i = 1;
setTimeout(function run() {
  func(i++);
  setTimeout(run, 100);
}, 100);

zero delay setTimeout:
=====================

There’s a special use case: setTimeout(func, 0), or just setTimeout(func).

6.9:Decorators and forwarding,call/apply:
======================

Decorators:
->suppose if there is a fn which takes so much time and runs often, then we can wrap the function with another. use map to store for this argument this value,if not available then call the func...it is known as decorators.

E.g:

function slow(x) {
  // there can be a heavy CPU-intensive job here
  alert(`Called with ${x}`);
  return x;
}

function cachingDecorator(func) {
  let cache = new Map();

  return function(x) {
    if (cache.has(x)) {    // if there's such key in cache
      return cache.get(x); // read the result from it
    }

    let result = func(x);  // otherwise call func

    cache.set(x, result);  // and cache (remember) the result
    return result;
  };
}

slow = cachingDecorator(slow);

alert( slow(1) ); // slow(1) is cached and the result returned
alert( "Again: " + slow(1) ); // slow(1) result returned from cache

alert( slow(2) ); // slow(2) is cached and the result returned
alert( "Again: " + slow(2) ); // slow(2) result returned from cache


call/apply/bind-prasuna sent videolink also in note.

6.11:Arrow functions revisited:
===============================

Do not have this
Do not have arguments
Can’t be called with new
They also don’t have super, but we didn’t study it yet. We will on the chapter Class inheritance

7.1:Property flags and descriptors:
===================================

Property flags:

=>Every property has writable,enumerable,configurable.

let user = {
  name: "John"
};

let descriptor = Object.getOwnPropertyDescriptor(user, 'name');

alert( JSON.stringify(descriptor, null, 2 ) );
/* property descriptor:
{
  "value": "John",
  "writable": true,
  "enumerable": true,
  "configurable": true
}
*/

=>get it by getOwnPropertyDescriptor method with obj name, prop name.

=>writable=edit,
=>enumerable=loop,
=>configurable=we can't change these prop if they are false.

=>In default all are true,

=>let user = { };

Object.defineProperty(user, "name", {
  value: "John",
  // for new properties we need to explicitly list what's true
  enumerable: true,
  configurable: true
});

alert(user.name); // John
user.name = "Pete"; // Error

=>define properties for multiple properties.


=>Object.preventExtensions(obj);//no adding another prop
=>Object.seal(obj);//configurable=f;
=>object.freeze(obj);//con=f,writable=f
is...for all these with boolean returns.

7.2:Property getters and setters = 12/02/2024

Property types:
->Object properties.=Normal
->Accessor property=getters and setters.

E.g:
let user = {
  get name() {
    return this._name;
  },

  set name(value) {
    if (value.length < 4) {
      alert("Name is too short, need at least 4 characters");
      return;
    }
    this._name = value;
  }
};

user.name = "Pete";
alert(user.name); // Pete

user.name = ""; // Name is too short...

1.get , set with val.

->usage of compatability.


8.1:Prototypal inheritance:
===========================

In JavaScript, all objects have a hidden [[Prototype]] property that’s either another object or null.
We can use obj.__proto__ to access it (a historical getter/setter, there are other ways, to be covered soon).
The object referenced by [[Prototype]] is called a “prototype”.
If we want to read a property of obj or call a method, and it doesn’t exist, then JavaScript tries to find it in the prototype.
Write/delete operations act directly on the object, they don’t use the prototype (assuming it’s a data property, not a setter).
If we call obj.method(), and the method is taken from the prototype, this still references obj. So methods always work with the current object even if they are inherited.
The for..in loop iterates over both its own and its inherited properties. All other key/value-getting methods only operate on the object itself.

proto example:
1.let a={
    name:"rishi",
    age:18,
    walk:function(){
        console.log("a is inherited");
        return "hii"
    }
}

let b={
    __proto__:a
}

console.log(b.walk());

2.let a={
    name:"rishi",
    age:18,
    walk:function(){
        console.log("a is inherited");
        return "hii"
    }
}

let b={
}
b.__proto__=a;

console.log(b.walk());

8.2:F.prototype:
================

=>Upto now, we have seen object with direct __proto__.

=>We Remember, new objects can be created with a constructor function, like new F().

=>If F.prototype is an object, then the new operator uses it to set [[Prototype]] for the new object.


E.g:
let animal = {
  eats: true
};

function Rabbit(name) {
  this.name = name;
}

Rabbit.prototype = animal;

let rabbit = new Rabbit("White Rabbit"); //  rabbit.__proto__ == animal

alert( rabbit.eats ); // true

8.3:Native prototype:
=====================

=>string.prototype->object.prototype
=>array.prototype->Object.prototype;

->every datatype has inbuilt methods but it doesn't directly have this, it is imported using prototype

E.g:
let arr = [1, 2, 3];

// it inherits from Array.prototype?
alert( arr.__proto__ === Array.prototype ); // true

// then from Object.prototype?
alert( arr.__proto__.__proto__ === Object.prototype ); // true

// and null on the top.
alert( arr.__proto__.__proto__.__proto__ ); // null

Borrowing from prototypes:

let obj = {
  0: "Hello",
  1: "world!",
  length: 2,
};

obj.join = Array.prototype.join;

alert( obj.join(',') );

8.4:Prototype methods, objects without __proto__:

=>Obj.__proto__ => is outdated and deprecated.

Methods:
=>Object.getPrototypeOf(obj) – returns the [[Prototype]] of obj.
=>Object.setPrototypeOf(obj, proto) – sets the [[Prototype]] of obj to proto.
=>Object.create(proto[, descriptors]) – creates an empty object with given proto as [[Prototype]] and optional property descriptors.

=>we can't set the a key as proto in object and store values;

9.1:class:
=========

Basic syntax:
============

class User {

  constructor(name) {
    this.name = name;
  }

  sayHi() {
    alert(this.name);
  }

}

// Usage:
let user = new User("John");
user.sayHi();

=> A class is a function in js.

=> A class may have methods like sayHI(){};

=>what it means is, a user named function is created, the user.prototype contains the sayHi() method in it.


1. the above example is the example of simple user class which creates a user obj.

2.It may be similar to constructor class.
E.g:
function User(name){
  this.name=name;
}

User.prototype.SayHi=function(){
  alert(this.name);
}

let user=new User("John");
user.sayHi();


3.The main difference between the two is,

->we have to use new keyword while creating a new object using class.
->class uses "use strict" always.
->In class, the enumerable flag is set to false;

->[[IsClassConstructor]]: true

class expression:
=================

=>It is like function expression.

ex:
let a=class{
  say(){
    alert('hello');
  }
}

new a().say()//hello

Dynamic class:
eg.
function makeClass(phrase) {
  // declare a class and return it
  return class {
    sayHi() {
      alert(phrase);
    }
  };
}

// Create a new class
let User = makeClass("Hello");

new User().sayHi(); // Hello

Class fields:
============

class User{
  name="john"
}

=>“Class fields” is a syntax that allows to add any properties.

=>This name is set for individual User.not in prototype.

9.2:Class inheritance:
======================

*.A class inherits another class using extends keyword.
*.super keyword
*.arrow functions don't have super.

*.If a function extends another function and doesn't have its own constructor, it uses super(parent) constructor.

*.we can override the class field too.

*.if a sub class extends the parent class.subclass has class field and has no constructor. so when the constructor goes to parent class due to super. the class field in the parent class is used not one in the sub class.


9.3:static properties and methods:
==================================

we can assign a method to class as a whole. such model is called as static model.

->static methods can't be called for individual objects.
article.createTodays()//will cause error.

applications:
->It is used to create,sort,delete and so on.

->Static property are also possible.
e.g:
lass Article {
  static publisher = "Ilya Kantor";
}

alert( Article.publisher );

=>In static , when a sub class extends a super class, while calling the static method of super, we can directly use the sub class. Because static methods are naturally inherited.

E.g:

class Animal {
  static planet = "Earth";

  constructor(name, speed) {
    this.speed = speed;
    this.name = name;
  }

  run(speed = 0) {
    this.speed += speed;
    alert(`${this.name} runs with speed ${this.speed}.`);
  }

  static compare(animalA, animalB) {
    return animalA.speed - animalB.speed;
  }

}

// Inherit from Animal
class Rabbit extends Animal {
  hide() {
    alert(`${this.name} hides!`);
  }
}

let rabbits = [
  new Rabbit("White Rabbit", 10),
  new Rabbit("Black Rabbit", 5)
];

rabbits.sort(Rabbit.compare);

rabbits[0].run(); // Black Rabbit runs with speed 5.

alert(Rabbit.planet); // Earth

9.4:Private and protected properties and methods:
=================================================

1.Internal interface:
=>Methods and properties accessible only inside the class.

2.External interface:
=>Accessible from anywhere.

Two types:
=>Public,
=>Private.

=>Protected is not implemented on language level.
prefix:_(underscore);

=>Protected items use getters and setters.

Private=>Can't be accessed outside the class.
prefix:#

=>Private won't support this keyword for privacy.

9.5:Extending built-in classes:
===============================

=>we can extend the inbuilt classes like array,map and so on..

class PowerArray extends Array {
  isEmpty() {
    return this.length === 0;
  }
}

let arr = new PowerArray(1, 2, 5, 10, 50);
alert(arr.isEmpty()); // false

let filteredArr = arr.filter(item => item >= 10);
alert(filteredArr); // 10, 50
alert(filteredArr.isEmpty()); // false

=>Here, the arr.filter methods returns the powerArray not array becoz, the powerArray extends the array.

=>we can also make the inbuilt return their natural type like array here by using [symbol.species]

e.g:
class PowerArray extends Array {
  isEmpty() {
    return this.length === 0;
  }

  // built-in methods will use this as the constructor
  static get [Symbol.species]() {
    return Array;
  }
}

let arr = new PowerArray(1, 2, 5, 10, 50);
alert(arr.isEmpty()); // false

// filter creates new array using arr.constructor[Symbol.species] as constructor
let filteredArr = arr.filter(item => item >= 10);

// filteredArr is not PowerArray, but Array
alert(filteredArr.isEmpty()); // Error: filteredArr.isEmpty is not a function

=>No static inheritance in built-ins

9.6:class checking: "instanceOf":
================================

instanceOf =>checks whether a object belongs to a certain class.

syntax: obj instanceof class

eg:
class Rabbit {}
let rabbit = new Rabbit();

// is it an object of Rabbit class?
alert( rabbit instanceof Rabbit ); // true

=>It also works with constructor functions.

=>It also works with prototype chain:

=>the built-in toString can be extracted from the object and executed in the context of any other value. And its result depends on that value.

e.g:
let arr=[1,2,3]
console.log(Object.prototype.toString.call(arr));

o.p: prints [Object Array];

9.7:Mixins:
==========

=>In js, we can only one prototype for an object. similarly a class may extend only one class. to solve it we use mixin.

Def:
 a mixin is a class containing methods that can be used by other classes without a need to inherit from it.

E.g:
let sayHiMixin = {
  sayHi() {
    alert(`Hello ${this.name}`);
  },
  sayBye() {
    alert(`Bye ${this.name}`);
  }
};

// usage:
class User {
  constructor(name) {
    this.name = name;
  }
}

// copy the methods
Object.assign(User.prototype, sayHiMixin);

// now User can say hi
new User("Dude").sayHi(); // Hello Dude!


=>A mixin object can also use .__proto__

EventMixin:
==========

EventMixin is used in browser context;
->.trigger(eventname,[...data])//to generate an event.
->.on(name,handler) that adds handler function as the listener to events with the given name. It will be called when an event with the given name triggers, and get the arguments from the .trigger call.
->And the method .off(name, handler) that removes the handler listener.

10.1: Error handling:
=====================

try=> if we have any doubt that a error may happen here, we use try block.

catch=>A error in try block will be captured here.

syntax:

try{
  //code
}catch(err){
  //error handling
}

->Here catch has only one parameter error,not two like in java(Exception e){};


=>Try and catch only works for runtime error.

Error object:
============

->catch(err)=>here err is known as error object.

Four things:
=>.name=>display name alone of the error.
=>.message=>associated message with the error.
=>.stack=> the sequence of nested calls that led to the error.
=>error=>displays the full error

Optional catch binding:
======================
=>the parameter err is optional if we don't need the error.


Throwing our own errors:
========================

"throw" operator: it will generate an error;

throw <error object>

Eg.let error = new Error("Things happen o_O");

alert(error.name); // Error
alert(error.message); // Things happen o_O

->new Error is also available like SyntaxError, ReferenceError.

Usage example:

try{
    let a=10;
    let b=11;
    if(a+b>20){
        throw new ReferenceError("addition")
    }

}catch(e){
    console.log(e.name+" "+e.message);
}

Rethrowing:
===========
->Imagine, we make mistake in the code but in the catch block, we implemented the error handling for different scenario.
=>In those cases, we can use instanceof to check the error and rethrow using "throw"
let json = '{ "age": 30 }'; // incomplete data
try {

  let user = JSON.parse(json);

  if (!user.name) {
    throw new SyntaxError("Incomplete data: no name");
  }

  blabla(); // unexpected error

  alert( user.name );

} catch (err) {

  if (err instanceof SyntaxError) {
    alert( "JSON Error: " + err.message );
  } else {
    throw err; // rethrow (*)
  }

}

finally:
=======
try{

}catch{

}finally{
  //always runs at last.
}

window.onerror on top of script to handle any uncaught exception in the code instead of just death.

10.2:custom errors:
===================    

=>When developing, we need our own error classes like dberror, httperror.
=>Generally error obj has name,message but in http we may need status code.
=>As the application grows, our own errors naturally form a hierarchy. For instance, HttpTimeoutError may inherit from HttpError, and so on.

Extending error:
===============

=>we can create a custom error class which extends general error;
e.g:
class ValidationError extends Error {
  constructor(message) {
    super(message); // (1)
    this.name = "ValidationError"; // (2)
  }
}

function test() {
  throw new ValidationError("Whoops!");
}

try {
  test();
} catch(err) {
  alert(err.message); // Whoops!
  alert(err.name); // ValidationError
  alert(err.stack); // a list of nested calls with line numbers for each
}

Wrapping exception:
=>Inside catch we have validationerror, property error.
=>we can wrap these various errors into common error known as read error. This is known as wrapping errors.

11.1:Introduction:callbacks:
============================

from akshay saini:
Callback function:
==================

Providing functions as an argument is known as callback function.

Eg:console.log("hello");

setTimeout(chk,1200);

console.log("end");

function chk(){
    console.log("midd");
}

->here settimeout accepts function as an argument. so chk is a callback function.


callback hell:
=============

const cart=[1,2,3];

api.creadeOrder(cart,function(){
  api.proceedToPayment(function(){
    api.showorderSummary();
  })
})

->A callback function inside a callback function and so many nested callback will make our code unreadable, unmaintable.
It is known as callback hell.

*.This structure is known as pyramid of doom.

Inversion of control:
====================
=>when we lose control of code during callback is known as inversion of control.

=>we don't how the function works may be written by someone. maybe callback fn is called no time or multiple times.

=>That's when inversion of control occurs.

eg:
let arr = [1, 2, 3];
first(function () {
    second();
});


function first(a) {
    alert("hello");
    a();//if this not called,callback fn is not called.
}

function second() {
    console.log("second");
}

Issues in callback:
=>Callback hell.
=>Inversion of doom.

=>To solve that promise came to picture;

11.2:Promise:
============
IN general,
There are,
=>Producing code= which takes time to complete.
=>Consuming code= which depends on the value from the producing code.
=>Promise= which links the producer with the consumer, if successful, returns value to consumer, if not informs the consumer.

Syntax:
let promise=new Promise(function(resolve,reject){
  //executor(the producing code)
})

=>Resolve and reject are the callback function provided by the js.
=>Resolve(value)=>If job success,return value.
=>Reject(error)=>If error,error returned.

The promise object has,
=>State: pending->Fulfilled(if success),pending->rejected.
=>Result: undefined->value,undefined->error.

Resolve:
e.g:
let promise = new Promise(function(resolve, reject) {
  // the function is executed automatically when the promise is constructed

  // after 1 second signal that the job is done with the result "done"
  setTimeout(() => resolve("done"), 1000);
});

Reject:
let promise = new Promise(function(resolve, reject) {
  // after 1 second signal that the job is finished with an error
  setTimeout(() => reject(new Error("Whoops!")), 1000);
});


=>we can immediately finish a promise by resolve or reject().

=>A promise is an object,
  ->Initially it is in pending state,
  Promise { <pending> }

  ->If success,then returned with a value;
  Promise { 123 } 

  ->If failed with reject,then error is thrown.

  promise{<rejected> error}

=>The properties state and result of the Promise object are internal. We can’t directly access them. We can use the methods .then/.catch/.finally for that. 

consumers:then,catch:
====================

=>promise has then method
promise.then(
  //two functions
  function(result) { /* handle a successful result */ },
  function(error) { /* handle an error */ }
)

E.g:
let promise = new Promise(function(resolve, reject) {
  setTimeout(() => resolve("done!"), 1000);
});

// resolve runs the first function in .then
promise.then(
  result => alert(result), // shows "done!" after 1 second
  error => alert(error) // doesn't run
);

.then():can have one argument to show only success scenario.
promise.then(alert);

.catch():to only rejected scenario,
let promise = new Promise((resolve, reject) => {
  setTimeout(() => reject(new Error("Whoops!")), 1000);
});

// .catch(f) is the same as promise.then(null, f)
promise.catch(alert); // shows "Error: Whoops!" after 1 second

finally():this is just like try..catch block finally.

E.g:
new Promise((resolve, reject) => {
  setTimeout(() => resolve("value"), 2000);
})
  .finally(() => alert("Promise ready")) // triggers first
  .then(result => alert(result)); // <-- .then shows "value"

11.3:promise chaining:
================
promise(){

}.then().then().then();

=>we can use thenable class with then method to create custom promise chain.

11.4:Error Handling with promise:
=================================

=>The easiest way to catch all errors is to append .catch at the end of chain.

fetch(url).then().then().then().catch(error=>alert(error.msg));

Implicit try...catch:
---------------------

=>There is a hidden try...catch inside the promise and its handler like .then
=>If any errors happen there, they gets handled by the catch();

Rethrowing:
-----------
we throw inside .catch, then the control goes to the next closest error handler. And if we handle the error and finish normally, then it continues to the next closest successful .then handler.

E.g:
let promise = new Promise(function (resolve, reject) {
    resolve(123);
});

let count=0;
promise.then(
    function(){
        console.log(count);
        count++;
    }
).then(
    function(){
        console.log(count);
        count++;
    }
).then(
    function () {
        console.log(counst);
        count++;
    }
).then(
    function () {
        console.log(count);
        count++;
    }
).catch(
    function(){
        console.log("error");
    }
).then(
    function(){
        console.log("continues");
    }
)

Output:
0
1
error
continues


=>If any rejection is not handled, then the program dies with an error;

11.5 Promise API:
============

=>6 methods in promise api.

1.Promise.all:
===========

syntax:
let promise=Promise.all(iterable);

iterable is the array are list of all individual promise and promise.all will wait for the all the promise to conclude and then it do its work.

Eg:
Promise.all([
  new Promise(resolve => setTimeout(() => resolve(1), 3000)), // 1
  new Promise(resolve => setTimeout(() => resolve(2), 2000)), // 2
  new Promise(resolve => setTimeout(() => resolve(3), 1000))  // 3
]).then(alert); // 1,2,3 when promises are ready: each promise contributes an array member

Eg2:

let urls = [
  'https://api.github.com/users/iliakan',
  'https://api.github.com/users/remy',
  'https://api.github.com/users/jeresig'
];

// map every url to the promise of the fetch
let requests = urls.map(url => fetch(url));

// Promise.all waits until all jobs are resolved
Promise.all(requests)
  .then(responses => responses.forEach(
    response => alert(`${response.url}: ${response.status}`)
  ));


=>In promise.all if any of the promise is rejected, then the outcome of the promise.all is reject and gets handled by the catch;

2.Promise.allSettled:
---------------------

.all= will accepts if each promise is resolved otherwise rejects all.

.allSettled= will continue till all the promise in the iterable is either resolved or rejected and passes to then or error based on resolved or reject;

E.g:
let urls = [
  'https://api.github.com/users/iliakan',
  'https://api.github.com/users/remy',
  'https://no-such-url'
];

Promise.allSettled(urls.map(url => fetch(url)))
  .then(results => { // (*)
    results.forEach((result, num) => {
      if (result.status == "fulfilled") {
        alert(`${urls[num]}: ${result.value.status}`);
      }
      if (result.status == "rejected") {
        alert(`${urls[num]}: ${result.reason}`);
      }
    });
  });


3.promise.race:
===============

Like a race, it only returns the fastest promise value(either resolved or rejected)
Promise.race([
  new Promise((resolve, reject) => setTimeout(() => resolve(1), 1000)),
  new Promise((resolve, reject) => setTimeout(() => reject(new Error("Whoops!")), 2000)),
  new Promise((resolve, reject) => setTimeout(() => resolve(3), 3000))
]).then(alert); // 1


4.Promise.any:
==============
=>similar to race but returns only the first fulfilled promise, if all the promise are rejects. then a special error: aggregate error as an array of error with each reject message.

e.g:
Promise.any([
  new Promise((resolve, reject) => setTimeout(() => reject(new Error("Ouch!")), 1000)),
  new Promise((resolve, reject) => setTimeout(() => reject(new Error("Error!")), 2000))
]).catch(error => {
  console.log(error.constructor.name); // AggregateError
  console.log(error.errors[0]); // Error: Ouch!
  console.log(error.errors[1]); // Error: Error!
});

5.Promise.resolve/reject:
==========================
same as reject(), resolve().

and this is obsolete.

11.6: Promisification:
======================

Definition:
 It’s the conversion of a function that accepts a callback into a function that returns a promise.

 eg:
 let loadScriptPromise = function(src) {
  return new Promise((resolve, reject) => {
    loadScript(src, (err, script) => {
      if (err) reject(err);
      else resolve(script);
    });
  });
};

// usage:
// loadScriptPromise('path/script.js').then(...)

11.7:Microtasks:
===============

.then,.catch,.finally are always async.

->Even when the promise is immediately resolved,the code below the then,catch will execute first and then the then,catch and so on.

->This is because, async task need proper management that's microtasks queue is used.


->when the promise is ready, its .then/catch/finally are put into queue, they are not executed first.

11.8: Async/Await:
==================

The async keyword before a function has two effects:

Makes it always return a promise.
Allows await to be used in it.
The await keyword before a promise makes JavaScript wait until that promise settles, and then:

If it’s an error, an exception is generated — same as if throw error were called at that very place.
Otherwise, it returns the result.
Together they provide a great framework to write asynchronous code that is easy to both read and write.

With async/await we rarely need to write promise.then/catch, but we still shouldn’t forget that they are based on promises, because sometimes (e.g. in the outermost scope) we have to use these methods. Also Promise.all is nice when we are waiting for many tasks simultaneously.


12.1: Generator function:
=========================

Generator fn syntax:
===================

function * generatefun(){
  //n number of yield.
  yield 1;
  yield 2;
  return 3;
}

//an obj of generatefun();
let obj=generatefun();

//returns a generator object.
obj.next()
//gives a object with a value:1 and done:false.

this is false because it contains further yields below.

obj.next()//{value:2,done:false};

obj.next()//{value:3,done:true};
//any further yield won't be executed.

yield*:
=======
function* hell(){
    yield 1;
    yield 2;
    yield 3;
    yield* hell2();
    yield 4;
    return 6;
}

function* hell2(){
    yield 7;
    yield 8;
}

let hells=hell()

for(let val of hells){
    console.log(val);
}
//1 2 3 7 8 4 // 6 is not returned because for...of only returns if done:false;

Generative function:
unlike regular functions, a generator and the calling code can exchange results by passing values in next/yield.

function* hell() {
    let sum = 0;
    sum = yield sum + 1;
    console.log("gen:"+sum);
    sum = sum * 2;
    yield sum;
    yield 3;
    yield 4;
    return 6;
}
let hells = hell()

let sum1 = hells.next().value;
console.log(sum1);
let sum2 = hells.next(5).value;
console.log(sum2);


output:
1
gen:5
10

.throw:
=======
function* hell() {
    yield 1;
    yield 2;
    return 3;
}
let hells = hell()

let sum1 = hells.next();
console.log(sum1);
try{
    hells.throw(new Error("gooderr"));
}catch(err){
    console.log(err.message);
}
let sum2 = hells.next();
console.log(sum2);
let sum3= hells.next();
console.log(sum3);

=>will stop the execution by making the done:true and throws a error which we have to catch;

.return:
========
will return the value and stop the execution by making the done:true;

